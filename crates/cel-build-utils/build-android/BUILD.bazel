package(default_visibility = ["//visibility:public"])

# This cc_static_library rule aims to create a "fat" static library
# by archiving object files from its direct and transitive dependencies.
# The list of dependencies is based on the direct_targets previously
# used in the cel-cc-src/src/lib.rs build script.
#
# IMPORTANT: This rule is experimental and requires the
# --experimental_cc_static_library Bazel flag to be enabled during the build.
cc_static_library(
    name = "cel",  # This target will produce libcel.a
    deps = [
        "@cel-cpp//compiler:compiler",
        "@cel-cpp//compiler:compiler_factory",
        "@cel-cpp//compiler:optional",
        "@cel-cpp//compiler:standard_library",
        "@cel-cpp//compiler:compiler_library_subset_factory",

        "@cel-cpp//runtime:runtime",
        "@cel-cpp//runtime:standard_runtime_builder_factory",
        "@cel-cpp//runtime:regex_precompilation",
        "@cel-cpp//runtime:comprehension_vulnerability_check",
        "@cel-cpp//runtime:constant_folding",

        "@cel-cpp//extensions:encoders",
        "@cel-cpp//extensions:proto_ext",
        "@cel-cpp//extensions:math_ext",
        "@cel-cpp//extensions:math_ext_macros",
        "@cel-cpp//extensions:math_ext_decls",
        "@cel-cpp//extensions:regex_functions",
        "@cel-cpp//extensions:bindings_ext",
        "@cel-cpp//extensions:select_optimization",
        "@cel-cpp//extensions:lists_functions",
        "@cel-cpp//extensions:sets_functions",
        "@cel-cpp//extensions:strings",
        "@cel-cpp//extensions:comprehensions_v2_functions",
        "@cel-cpp//extensions:comprehensions_v2_macros",
        "@cel-cpp//extensions:formatting",
    ],
    # Features like "symbol_check" are typically enabled by default for this rule.
    # You can disable it if needed:
    # features = ["-symbol_check"],
)

# ============================================================================
# Android Platform Definitions
# ============================================================================

platform(
    name = "aarch64-linux-android",
    constraint_values = [
        "@platforms//cpu:aarch64",
        "@platforms//os:android",
    ],
)

platform(
    name = "armv7-linux-androideabi",
    constraint_values = [
        "@platforms//cpu:armv7",
        "@platforms//os:android",
    ],
)

platform(
    name = "x86_64-linux-android",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:android",
    ],
)

platform(
    name = "i686-linux-android",
    constraint_values = [
        "@platforms//cpu:x86_32",
        "@platforms//os:android",
    ],
)

# ============================================================================
# Toolchain Configuration Notes
# ============================================================================
# 
# Android NDK toolchains are registered via rules_android_ndk extension
# Environment variables required:
# - ANDROID_NDK_HOME: Path to Android NDK installation 
