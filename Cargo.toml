[workspace]
resolver = "2"
members = [
    "crates/*",
]

[workspace.package]
version = "0.1.4"
edition = "2021"
authors = ["Jason Li <xjason.li@gmail.com>"]
license = "Apache-2.0"
repository = "https://github.com/xjasonli/cel-cxx"
rust-version = "1.80"
homepage = "https://github.com/xjasonli/cel-cxx"
keywords = ["cel", "expression", "language", "ffi", "cxx"]

[workspace.dependencies]
cel-cxx = { path = "." }
cel-cxx-ffi = { path = "crates/cel-cxx-ffi", version = "0.1.3" }
cel-build-utils = { path = "crates/cel-build-utils", version = "0.1.3" }
cel-cxx-macros = { path = "crates/cel-cxx-macros", version = "0.1.1" }

cxx = { version = "1.0", features = ["c++17"] }
cxx-build = { version = "1.0", features = ["parallel"] }
thiserror = { version = "2.0" }
anyhow = "1"
glob = "0.3"
tonic = { version = "0.13" }
tokio = { version = "1"}
async-std = { version = "1" }
smol = { version = "2" }
async-scoped = { version = "0.9" }
itertools = { version = "0.14" }
chrono = { version = "0.4" }
dyn-clone = "1"
paste = "1"
futures = { version = "0.3" }
pin-project-lite = "0.2"
ouroboros = "0.18"
syn = "2"
quote = "1"
prettyplease = "0.2"
proc-macro2 = "1"
semver = "1"
sha2 = "0.10"
regex = "1"
reqwest = { version = "0.12", default-features = false, features = ["rustls-tls", "charset", "http2", "system-proxy", "blocking"] }
downloader = { version = "0.2", default-features = false, features = ["rustls-tls", "verify"] }
arc-slice = { version = "0.1", features = ["default-layout-any-buffer"] }


[package]
name = "cel-cxx"
description = "A high-performance, type-safe Rust interface for Common Expression Language (CEL), build on top of cel-cpp with zero-cost FFI bindings via cxx"
categories = ["api-bindings"]
documentation = "https://docs.rs/cel-cxx"
readme = "README.md"
version.workspace = true
edition.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true
rust-version.workspace = true
homepage.workspace = true
keywords.workspace = true

[package.metadata.docs.rs]
all-features = true
targets = []

[features]
default = ["derive"]
derive = ["dep:cel-cxx-macros"]
async = ["dep:async-scoped", "dep:futures", "dep:pin-project-lite"]
tokio = ["async", "dep:tokio", "async-scoped/use-tokio"]
async-std = ["async", "dep:async-std", "async-scoped/use-async-std"]
smol = ["async", "dep:smol"]

[dependencies]
cel-cxx-ffi = { workspace = true }
cel-cxx-macros = { workspace = true, optional = true }
cxx = { workspace = true }
paste = { workspace = true }
thiserror = { workspace = true }
itertools = { workspace = true }
chrono = { workspace = true }
dyn-clone = { workspace = true }
ouroboros = { workspace = true }
futures = { workspace = true, optional = true }
tokio = { workspace = true, optional = true, features = ["rt"] }
async-std = { workspace = true, optional = true }
smol = { workspace = true, optional = true }
async-scoped = { workspace = true, optional = true }
pin-project-lite = { workspace = true, optional = true }
arc-slice = { workspace = true }

[dev-dependencies]
tokio = { workspace = true, features = ["time", "rt-multi-thread", "macros"] }
async-std = { workspace = true, features = ["attributes"] }

[[example]]
name = "basic"
path = "examples/basic.rs"
required-features = ["derive"]

[[example]]
name = "comprehensive"
path = "examples/comprehensive.rs"
required-features = ["derive"]

[[example]]
name = "tokio"
path = "examples/async/tokio.rs"
required-features = ["derive", "tokio"]

[[example]]
name = "async-std"
path = "examples/async/async-std.rs"
required-features = ["derive", "async-std"]

[[example]]
name = "smol"
path = "examples/async/smol.rs"
required-features = ["derive", "smol"]
